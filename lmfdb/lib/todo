-higher precision

DirichletGroup:
 def __init__(self, modulus, zeta, zeta_order)
 def change_ring(self, R, zeta=None, zeta_order=None)
 def base_extend(self, R)
 def __call__(self, x)
 def _coerce_in_dirichlet_character(self, x)
 def _coerce_impl(self, x)
 def __cmp__(self, other)
 def __len__(self)
 def _repr_(self)
 def decomposition(self)
 def exponent(self)
 def _automorphisms(self)
 def galois_orbits(self, v=None, reps_only=False, sort=True, check=True)
 def gen(self, n=0)
 def gens(self)
 def integers_mod(self)
 def modulus(self)
 def ngens(self)
 def order(self)
 def random_element(self)
 def unit_gens(self)
 def zeta(self)
 def zeta_order(self)

also: __getitem__

DirichletCharacter:
 - def __init__(self, parent, x, check=True) (may need to revisit, add more options)
 ? def __eval_at_minus_one(self) 
 * def __call__(self, m) 
 def change_ring(self, R)
 * def __cmp__(self, other)
 def __hash__(self)
 * def __invert__(self)
 (partial) def _mul_(self,  other)
 def __copy__(self)
 def __pow__(self, n)
 (THINK ABOUT) def _repr_short_(self)
 (THINK ABOUT) def _repr_(self)
 def _latex_(self)
 def base_ring(self)
 def bar(self)
 def bernoulli(self, k, algorithm='recurrence', cache=True, **opts)
 * def conductor(self)
 def decomposition(self)
 def extend(self, M)
 def galois_orbit(self, sort=True)
 * def gauss_sum(self, a=1)
 * def gauss_sum_numerical(self, prec=53, a=1)
 def jacobi_sum(self, char, check=True)
 def kloosterman_sum(self, a=1,b=0)
 def kloosterman_sum_numerical(self, prec=53, a=1,b=0)
 * def is_even(self)
 * def is_odd(self)
 * def is_primitive(self)
 * def is_trivial(self)
 * def kernel(self)
 def maximize_base_ring(self)
 def minimize_base_ring(self)
 * def modulus(self)
 * def level(self)
 * def multiplicative_order(self)
 * def primitive_character(self)
 def restrict(self, M)
 * def values(self)
 def values_on_gens(self)
 def element(self)
